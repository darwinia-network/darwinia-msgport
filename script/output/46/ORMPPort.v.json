{"language": "Solidity", "sources": {"src/ports/ORMPPort.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.17;\n\nimport \"./base/BaseMessagePort.sol\";\nimport \"./base/PortLookup.sol\";\nimport \"ORMP/src/interfaces/IORMP.sol\";\nimport \"ORMP/src/user/Application.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\ncontract ORMPPort is Ownable2Step, Application, BaseMessagePort, PortLookup {\n    constructor(address dao, address ormp, string memory name) Application(ormp) BaseMessagePort(name) {\n        _transferOwnership(dao);\n    }\n\n    function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }\n\n    function setAppConfig(address oracle, address relayer) external onlyOwner {\n        _setAppConfig(oracle, relayer);\n    }\n\n    function setToPort(uint256 _toChainId, address _toPortAddress) external onlyOwner {\n        _setToPort(_toChainId, _toPortAddress);\n    }\n\n    function setFromPort(uint256 _fromChainId, address _fromPortAddress) external onlyOwner {\n        _setFromPort(_fromChainId, _fromPortAddress);\n    }\n\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        internal\n        override\n    {\n        (uint256 gasLimit, address refund, bytes memory ormpParams) = abi.decode(params, (uint256, address, bytes));\n        bytes memory encoded = abi.encodeWithSelector(ORMPPort.recv.selector, fromDapp, toDapp, message);\n        IORMP(TRUSTED_ORMP).send{value: msg.value}(\n            toChainId, _checkedToPort(toChainId), gasLimit, encoded, refund, ormpParams\n        );\n    }\n\n    function recv(address fromDapp, address toDapp, bytes calldata message) external payable onlyORMP {\n        uint256 fromChainId = _fromChainId();\n        require(_xmsgSender() == _checkedFromPort(fromChainId), \"!auth\");\n        _recv(fromChainId, fromDapp, toDapp, message);\n    }\n\n    function fee(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 gasLimit,, bytes memory ormpParams) = abi.decode(params, (uint256, address, bytes));\n        bytes memory encoded = abi.encodeWithSelector(ORMPPort.recv.selector, msg.sender, toDapp, message);\n        return IORMP(TRUSTED_ORMP).fee(toChainId, address(this), gasLimit, encoded, ormpParams);\n    }\n}\n", "keccak256": "0xe2b7a6ae7bf37d61ae4ee6b3508f321dd1bbcb116a5765add4ba82f4452e68ba"}, "src/ports/base/BaseMessagePort.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IMessagePort.sol\";\nimport \"./PortMetadata.sol\";\n\nabstract contract BaseMessagePort is IMessagePort, PortMetadata {\n    constructor(string memory name) PortMetadata(name) {}\n\n    function LOCAL_CHAINID() public view returns (uint256) {\n        return block.chainid;\n    }\n\n    /// @dev Send a cross-chain message over the MessagePort.\n    ///      Port developer should implement this, then it will be called by `send`.\n    /// @param fromDapp The real sender account who send the message.\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        internal\n        virtual;\n\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params) public payable {\n        _send(msg.sender, toChainId, toDapp, message, params);\n    }\n\n    /// @dev Make toDapp accept messages.\n    ///      This should be called by message port when a message is received.\n    /// @param fromChainId The source chainId, standard evm chainId.\n    /// @param fromDapp The message sender in source chain.\n    /// @param toDapp The message receiver in dest chain.\n    /// @param message The message body.\n    function _recv(uint256 fromChainId, address fromDapp, address toDapp, bytes memory message)\n        internal\n        returns (bytes memory)\n    {\n        (bool success, bytes memory returndata) =\n            toDapp.call{value: msg.value}(abi.encodePacked(message, fromChainId, fromDapp));\n        if (success) {\n            return returndata;\n        } else {\n            revert MessageFailure(returndata);\n        }\n    }\n\n    function fee(uint256, address, bytes calldata, bytes calldata) external view virtual returns (uint256) {\n        revert(\"Unimplemented!\");\n    }\n}\n", "keccak256": "0xefb1855187194d8e8d98104bf6fd15411428d6f26f97805dc2a8a7857d621864"}, "src/ports/base/PortLookup.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"./FromPortLookup.sol\";\nimport \"./ToPortLookup.sol\";\n\nabstract contract PortLookup is FromPortLookup, ToPortLookup {}\n", "keccak256": "0x1c8d56d5374090dfd7100cfcd8d2592b3b3a28c13c0f9f3658ac7412b8f614ed"}, "lib/ORMP/src/interfaces/IORMP.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.17;\n\nimport \"../Common.sol\";\n\ninterface IORMP {\n    /// @dev Send a cross-chain message over the endpoint.\n    /// @notice follow https://eips.ethereum.org/EIPS/eip-5750\n    /// @param toChainId The Message destination chain id.\n    /// @param to User application contract address which receive the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param refund Return extra fee to refund address.\n    /// @param params General extensibility for relayer to custom functionality.\n    /// @return Return the hash of the message as message id.\n    function send(\n        uint256 toChainId,\n        address to,\n        uint256 gasLimit,\n        bytes calldata encoded,\n        address refund,\n        bytes calldata params\n    ) external payable returns (bytes32);\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    /// @param toChainId The Message destination chain id.\n    //  @param ua User application contract address which send the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param params General extensibility for relayer to custom functionality.\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Recv verified message and dispatch to destination user application address.\n    /// @param message Verified receive message info.\n    /// @param proof Message proof of this message.\n    /// @return dispatchResult Result of the message dispatch.\n    function recv(Message calldata message, bytes calldata proof) external returns (bool dispatchResult);\n\n    function prove() external view returns (bytes32[32] memory);\n\n    /// @dev Fetch user application config.\n    /// @notice If user application has not configured, then the default config is used.\n    /// @param ua User application contract address.\n    /// @return user application config.\n    function getAppConfig(address ua) external view returns (UC memory);\n\n    /// @notice Set user application config.\n    /// @param oracle Oracle which user application choose.\n    /// @param relayer Relayer which user application choose.\n    function setAppConfig(address oracle, address relayer) external;\n\n    function defaultUC() external view returns (UC memory);\n}\n", "keccak256": "0xc78b6e5e140bf7972aa17bef9f4104df9d6841171a3be7424e4472f31e346cfd"}, "lib/ORMP/src/user/Application.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.17;\n\nimport \"../Common.sol\";\nimport \"../interfaces/IORMP.sol\";\n\n// https://eips.ethereum.org/EIPS/eip-5164\nabstract contract Application {\n    address public immutable TRUSTED_ORMP;\n\n    constructor(address ormp) {\n        TRUSTED_ORMP = ormp;\n    }\n\n    function _setAppConfig(address oracle, address relayer) internal virtual {\n        IORMP(TRUSTED_ORMP).setAppConfig(oracle, relayer);\n    }\n\n    modifier onlyORMP() {\n        require(TRUSTED_ORMP == msg.sender, \"!ormp\");\n        _;\n    }\n\n    function _messageId() internal pure returns (bytes32 _msgDataMessageId) {\n        require(msg.data.length >= 84, \"!messageId\");\n        assembly {\n            _msgDataMessageId := calldataload(sub(calldatasize(), 84))\n        }\n    }\n\n    function _fromChainId() internal pure returns (uint256 _msgDataFromChainId) {\n        require(msg.data.length >= 52, \"!fromChainId\");\n        assembly {\n            _msgDataFromChainId := calldataload(sub(calldatasize(), 52))\n        }\n    }\n\n    function _xmsgSender() internal pure returns (address payable _from) {\n        require(msg.data.length >= 20, \"!xmsgSender\");\n        assembly {\n            _from := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n}\n", "keccak256": "0x52fa3b8248416ce390cabd3796971b1d54fc0811ae418e9bc83e77a7e7fde0b0"}, "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n", "keccak256": "0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c"}, "src/interfaces/IMessagePort.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ninterface IMessagePort {\n    error MessageFailure(bytes errorData);\n\n    /// @dev Send a cross-chain message over the MessagePort.\n    /// @notice Send a cross-chain message over the MessagePort.\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params) external payable;\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    ///         It should be noted that not all ports will implement this interface.\n    /// @dev If the messaging protocol does not support on-chain fetch fee, then revert with \"Unimplemented!\".\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    function fee(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        view\n        returns (uint256);\n}\n", "keccak256": "0x607973d9058f666adc6375745bc504f1b78a4c338a00564bb21168a940a1c1c2"}, "src/ports/base/PortMetadata.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IPortMetadata.sol\";\n\ncontract PortMetadata is IPortMetadata {\n    string internal _name;\n    string internal _uri;\n\n    constructor(string memory name_) {\n        _name = name_;\n    }\n\n    function _setURI(string memory uri_) internal virtual {\n        _uri = uri_;\n        emit URI(uri_);\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function code() public view virtual returns (bytes4) {\n        return bytes4(keccak256(bytes(_name)));\n    }\n\n    function uri() public view virtual returns (string memory) {\n        return _uri;\n    }\n}\n", "keccak256": "0x9ae86269d66a3e9ec2ea53e9a3eb1b1559630dae73ca066a346060fd719ff6be"}, "src/ports/base/FromPortLookup.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nabstract contract FromPortLookup {\n    event SetFromPort(uint256 fromChainId, address fromPort);\n\n    // fromChainId => fromPortAddress\n    mapping(uint256 => address) public fromPortLookup;\n\n    function _setFromPort(uint256 fromChainId, address fromPort) internal virtual {\n        fromPortLookup[fromChainId] = fromPort;\n        emit SetFromPort(fromChainId, fromPort);\n    }\n\n    function _fromPort(uint256 fromChainId) internal view returns (address) {\n        return fromPortLookup[fromChainId];\n    }\n\n    function _checkedFromPort(uint256 fromChainId) internal view returns (address l) {\n        l = fromPortLookup[fromChainId];\n        require(l != address(0), \"!fromPort\");\n    }\n}\n", "keccak256": "0xd1d483956892ccde0c79b5be2fefa8413712da146316e17099cf279541769526"}, "src/ports/base/ToPortLookup.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nabstract contract ToPortLookup {\n    event SetToPort(uint256 toChainId, address toPort);\n\n    // toChainId => toPortAddress\n    mapping(uint256 => address) public toPortLookup;\n\n    function _setToPort(uint256 toChainId, address toPort) internal virtual {\n        toPortLookup[toChainId] = toPort;\n        emit SetToPort(toChainId, toPort);\n    }\n\n    function _toPort(uint256 toChainId) internal view returns (address) {\n        return toPortLookup[toChainId];\n    }\n\n    function _checkedToPort(uint256 toChainId) internal view returns (address l) {\n        l = toPortLookup[toChainId];\n        require(l != address(0), \"!toPort\");\n    }\n}\n", "keccak256": "0x474da6c9f021013420f7ae019b021e2ccd94ee4d893a23a9c9d9158139fb0103"}, "lib/ORMP/src/Common.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.17;\n\n/// @dev The block of control information and data for comminicate\n/// between user applications. Messages are the exchange medium\n/// used by channels to send and receive data through cross-chain networks.\n/// A message is sent from a source chain to a destination chain.\n/// @param index The leaf index lives in channel's incremental mekle tree.\n/// @param fromChainId The message source chain id.\n/// @param from User application contract address which send the message.\n/// @param toChainId The message destination chain id.\n/// @param to User application contract address which receive the message.\n/// @param gasLimit Gas limit for destination UA used.\n/// @param encoded The calldata which encoded by ABI Encoding.\nstruct Message {\n    address channel;\n    uint256 index;\n    uint256 fromChainId;\n    address from;\n    uint256 toChainId;\n    address to;\n    uint256 gasLimit;\n    bytes encoded; /*(abi.encodePacked(SELECTOR, PARAMS))*/\n}\n\n/// @dev User application custom configuration.\n/// @param oracle Oracle contract address.\n/// @param relayer Relayer contract address.\nstruct UC {\n    address oracle;\n    address relayer;\n}\n\n/// @dev Hash of the message.\nfunction hash(Message memory message) pure returns (bytes32) {\n    return keccak256(abi.encode(message));\n}\n", "keccak256": "0x832de8c9469de78d3133d42716444007d3fa2aa2fe88a6fcbb81d119d8ffbd1d"}, "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n", "keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218"}, "src/interfaces/IPortMetadata.sol": {"content": "// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ninterface IPortMetadata {\n    event URI(string uri);\n\n    /// @notice Get the port name, it's globally unique and immutable.\n    /// @return The MessagePort name.\n    function name() external view returns (string memory);\n\n    /// @return The port metadata uri.\n    function uri() external view returns (string memory);\n}\n", "keccak256": "0x18935fa89066ea245d7566f9fa54402bc8fd513b2496542bd316f732396330b9"}, "lib/openzeppelin-contracts/contracts/utils/Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n", "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7"}}, "settings": {"remappings": ["@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/", "@layerzerolabs/solidity-examples/=lib/solidity-examples/", "@openzeppelin/=lib/openzeppelin-contracts/", "@darwinia/contracts-periphery/=lib/darwinia-messages-sol/contracts/periphery/", "sgn-v2-contracts/=lib/sgn-v2-contracts/", "ds-test/=lib/forge-std/lib/ds-test/src/", "forge-std/=lib/forge-std/src/", "ORMP/=lib/ORMP/", "create3-deploy/=lib/create3-deploy/", "solmate/=lib/solmate/src/"], "optimizer": {"enabled": true, "runs": 999999}, "metadata": {"useLiteralContent": false, "bytecodeHash": "ipfs"}, "outputSelection": {"*": {"": ["ast"], "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata", "storageLayout", "devdoc", "userdoc"]}}, "evmVersion": "london", "libraries": {}, "compilationTarget": {"src/ports/ORMPPort.sol": "ORMPPort"}}}
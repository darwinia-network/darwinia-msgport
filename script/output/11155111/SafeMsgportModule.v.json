{"language":"Solidity","sources":{"src/xAccount/SafeMsgportModule.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.17;\n\nimport \"../interfaces/ISafe.sol\";\nimport \"../user/xAuth.sol\";\n\ncontract SafeMsgportModule is xAuth {\n    address public port;\n\n    address public childXAccount;\n    uint256 public rootChainid;\n    address public rootOwner;\n\n    event SetPort(address port);\n\n    error AlreadySetup();\n    error ZeroChainId();\n    error ModuleTransactionFailed(bytes reason);\n    error SendEtherFailed(bytes reason);\n\n    constructor() {\n        rootChainid = 1;\n    }\n\n    function setup(address xAccount, uint256 chainId, address owner, address port_) external {\n        if (rootChainid > 0) {\n            revert AlreadySetup();\n        }\n        if (chainId == 0) {\n            revert ZeroChainId();\n        }\n        port = port_;\n        childXAccount = xAccount;\n        rootChainid = chainId;\n        rootOwner = owner;\n        emit SetPort(port_);\n    }\n\n    /// @dev Fetch the xAccount xOwner.\n    /// @return (chainId, owner)\n    ///   - chainId Chain id that xAccount belongs in.\n    ///   - owner Owner that xAccount belongs to.\n    function xOwner() public view override returns (uint256, address) {\n        return (rootChainid, rootOwner);\n    }\n\n    /// @dev Check that the xCall originates from the port.\n    /// @return Check result.\n    function checkPort(address port_) public view override returns (bool) {\n        return port == port_;\n    }\n\n    /// @dev Set port.\n    /// @param port_ New port.\n    function setPort(address port_) external {\n        _checkXAuth();\n        port = port_;\n        emit SetPort(port_);\n    }\n\n    /// @dev Receive xCall from root chain xOwner.\n    /// @param target Target of the transaction that should be executed\n    /// @param value Wei value of the transaction that should be executed\n    /// @param data Data of the transaction that should be executed\n    /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\n    /// @return xExecute return data Return data after xCall.\n    function xExecute(address target, uint256 value, bytes calldata data, Operation operation)\n        external\n        payable\n        returns (bytes memory)\n    {\n        _checkXAuth();\n        if (msg.value > 0) {\n            (bool s, bytes memory r) = childXAccount.call{value: msg.value}(\"\");\n            if (!s) revert SendEtherFailed(r);\n        }\n        (bool success, bytes memory returnData) =\n            ISafe(childXAccount).execTransactionFromModuleReturnData(target, value, data, operation);\n        if (!success) revert ModuleTransactionFailed(returnData);\n        return returnData;\n    }\n}\n"},"src/interfaces/ISafe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nenum Operation {\n    Call,\n    DelegateCall\n}\n\ninterface ISafe {\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n    function enableModule(address module) external;\n    function execTransactionFromModuleReturnData(address to, uint256 value, bytes memory data, Operation operation)\n        external\n        returns (bool success, bytes memory returnData);\n}\n"},"src/user/xAuth.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.17;\n\nimport \"./Application.sol\";\nimport \"../interfaces/IPortRegistry.sol\";\n\nabstract contract xAuth is Application {\n    function xOwner() public virtual returns (uint256, address);\n    function checkPort(address port) public virtual returns (bool);\n\n    function _checkXAuth() internal virtual {\n        address port = _msgPort();\n        uint256 fromChainId = _fromChainId();\n        (uint256 chainId, address owner) = xOwner();\n        require(fromChainId != block.chainid, \"!fromChainId\");\n        require(checkPort(port), \"!trusted\");\n        require(fromChainId == chainId, \"!xOwner.chainId\");\n        require(_xmsgSender() == owner, \"!xOwner.owner\");\n    }\n}\n"},"src/user/Application.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.17;\n\nabstract contract Application {\n    function _msgPort() internal view returns (address _port) {\n        _port = msg.sender;\n    }\n\n    /// @notice The cross-chain message source chainId\n    function _fromChainId() internal pure returns (uint256 _msgDataFromChainId) {\n        require(msg.data.length >= 52, \"!fromChainId\");\n        assembly {\n            _msgDataFromChainId := calldataload(sub(calldatasize(), 52))\n        }\n    }\n\n    /// @notice Get the source chain fromDapp address.\n    function _xmsgSender() internal pure returns (address payable _from) {\n        require(msg.data.length >= 20, \"!fromDapp\");\n        assembly {\n            _from := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n}\n"},"src/interfaces/IPortRegistry.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ninterface IPortRegistry {\n    function get(uint256 chainId, address port) external view returns (string memory);\n    function get(uint256 chainId, string calldata name) external view returns (address);\n}\n"}},"settings":{"remappings":["@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/","@layerzerolabs/solidity-examples/=lib/solidity-examples/","@openzeppelin/=lib/openzeppelin-contracts/","@darwinia/contracts-periphery/=lib/darwinia-messages-sol/contracts/periphery/","sgn-v2-contracts/=lib/sgn-v2-contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","ORMP/=lib/ORMP/","create3-deploy/=lib/create3-deploy/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs"},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc"]}},"evmVersion":"london","libraries":{}}}

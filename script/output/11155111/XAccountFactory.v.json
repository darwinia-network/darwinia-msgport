{"language":"Solidity","sources":{"src/xAccount/XAccountFactory.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"../interfaces/ISafeMsgportModule.sol\";\nimport \"../interfaces/ISafeProxyFactory.sol\";\nimport \"../interfaces/ISafe.sol\";\nimport \"../interfaces/IPortRegistry.sol\";\nimport \"../interfaces/IMessagePort.sol\";\nimport \"../ports/base/PortMetadata.sol\";\nimport \"../user/Application.sol\";\nimport \"../utils/CREATE3.sol\";\n\n/// @title XAccountFactory\n/// @dev XAccountFactory is a factory contract for create xAccount.\n///   - 1 account only have 1 xAccount on target chain for each factory.\ncontract XAccountFactory is Ownable2Step, Application, PortMetadata {\n    address public safeMsgportModule;\n    address public safeFallbackHandler;\n    address public safeSingleton;\n    ISafeProxyFactory public safeFactory;\n\n    IPortRegistry public immutable REGISTRY;\n\n    address internal constant DEAD_OWNER = 0xDDdDddDdDdddDDddDDddDDDDdDdDDdDDdDDDDDDd;\n\n    event XAccountCreated(uint256 fromChainId, address deployer, address xAccount, address module, address port);\n\n    constructor(\n        address dao,\n        address module,\n        address sfactory,\n        address singleton,\n        address fallbackHandler,\n        address registry,\n        string memory name\n    ) PortMetadata(name) {\n        _transferOwnership(dao);\n        safeMsgportModule = module;\n        safeSingleton = singleton;\n        safeFallbackHandler = fallbackHandler;\n        safeFactory = ISafeProxyFactory(sfactory);\n        REGISTRY = IPortRegistry(registry);\n    }\n\n    function LOCAL_CHAINID() public view returns (uint256) {\n        return block.chainid;\n    }\n\n    function setSafeFactory(address factory) external onlyOwner {\n        safeFactory = ISafeProxyFactory(factory);\n    }\n\n    function setSafeSingleton(address singleton) external onlyOwner {\n        safeSingleton = singleton;\n    }\n\n    function setSafeFallbackHandler(address fallbackHandler) external onlyOwner {\n        safeFallbackHandler = fallbackHandler;\n    }\n\n    function setSafeMsgportModule(address module) external onlyOwner {\n        safeMsgportModule = module;\n    }\n\n    function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }\n\n    function isRegistred(address port) public view returns (bool) {\n        return bytes(REGISTRY.get(LOCAL_CHAINID(), port)).length > 0;\n    }\n\n    function _toFactory(uint256 toChainId) internal view returns (address l) {\n        l = REGISTRY.get(toChainId, name());\n        require(l != address(0), \"!to\");\n    }\n\n    function _fromFactory(uint256 fromChainId) internal view returns (address) {\n        return REGISTRY.get(fromChainId, name());\n    }\n\n    /// @dev Cross chian function for create xAccount on target chain.\n    /// @notice If recovery address is `address(0)`, do not enabale recovery module.\n    /// @param name Port name that used for create xAccount.\n    /// @param toChainId Target chain id.\n    /// @param params Port params correspond with the port.\n    /// @param recovery The default safe recovery module address on target chain for xAccount.\n    function xCreate(string calldata name, uint256 toChainId, bytes calldata params, address recovery)\n        external\n        payable\n    {\n        uint256 fee = msg.value;\n        require(toChainId != LOCAL_CHAINID(), \"!toChainId\");\n\n        address deployer = msg.sender;\n        bytes memory encoded = abi.encodeWithSelector(XAccountFactory.xDeploy.selector, deployer, recovery);\n        address port = REGISTRY.get(LOCAL_CHAINID(), name);\n        IMessagePort(port).send{value: fee}(toChainId, _toFactory(toChainId), encoded, params);\n    }\n\n    /// @dev Create xAccount on target chain.\n    /// @notice Only could be called by source chain.\n    /// @param deployer Deployer on source chain.\n    /// @param recovery The default safe recovery module address for xAccount.\n    /// @return Deployed xAccount address.\n    function xDeploy(address deployer, address recovery) external returns (address, address) {\n        address port = _msgPort();\n        uint256 fromChainId = _fromChainId();\n        require(isRegistred(port), \"!port\");\n        require(_xmsgSender() == _fromFactory(fromChainId), \"!xmsgSender\");\n\n        return _deploy(fromChainId, deployer, port, recovery);\n    }\n\n    function _deploy(uint256 chainId, address deployer, address port, address recovery)\n        internal\n        returns (address proxy, address module)\n    {\n        require(chainId != LOCAL_CHAINID(), \"!chainId\");\n\n        bytes32 salt = keccak256(abi.encodePacked(chainId, deployer));\n        (proxy, module) = _deployXAccount(salt);\n        _setupProxy(proxy, module, recovery);\n        _setupModule(module, proxy, chainId, deployer, port);\n\n        emit XAccountCreated(chainId, deployer, proxy, module, port);\n    }\n\n    function setupModules(address module, address recovery) external {\n        ISafe safe = ISafe(address(this));\n        safe.enableModule(module);\n        if (recovery != address(0)) safe.enableModule(recovery);\n    }\n\n    function _setupProxy(address proxy, address module, address recovery) internal {\n        bytes memory setupModulesData = abi.encodeWithSelector(XAccountFactory.setupModules.selector, module, recovery);\n        uint256 threshold = 1;\n        address[] memory owners = new address[](1);\n        owners[0] = DEAD_OWNER;\n        ISafe(proxy).setup(\n            owners,\n            threshold,\n            address(this),\n            setupModulesData,\n            safeFallbackHandler,\n            address(0x0),\n            0,\n            payable(address(0x0))\n        );\n    }\n\n    function _setupModule(address module, address proxy, uint256 chainId, address deployer, address port) internal {\n        ISafeMsgportModule(module).setup(proxy, chainId, deployer, port);\n    }\n\n    function _deployXAccount(bytes32 salt) internal returns (address proxy, address module) {\n        (proxy, module) = CREATE3.getDeployed(salt, address(this));\n        bytes memory creationCode1 = safeFactory.proxyCreationCode();\n        bytes memory deploymentCode1 = abi.encodePacked(creationCode1, uint256(uint160(safeSingleton)));\n\n        (proxy, module) = CREATE3.deploy(salt, deploymentCode1, safeMsgportModule);\n    }\n\n    /// @dev Calculate xAccount address on target chain.\n    /// @notice The module address is only effective during its creation and may be replaced by the xAccount in the future.\n    /// @param fromChainId Chain id that xAccount belongs in.\n    /// @param toChainId Chain id that xAccount lives in.\n    /// @param deployer Owner that xAccount belongs to.\n    /// @return (xAccount address, module address).\n    function xAccountOf(uint256 fromChainId, uint256 toChainId, address deployer)\n        public\n        view\n        returns (address, address)\n    {\n        return xAccountOf(fromChainId, deployer, _toFactory(toChainId));\n    }\n\n    /// @dev Calculate xAccount address.\n    /// @notice The module address is only effective during its creation and may be replaced by the xAccount in the future.\n    /// @param fromChainId Chain id that xAccount belongs in.\n    /// @param deployer Owner that xAccount belongs to.\n    /// @param factory Factory that create xAccount.\n    /// @return (xAccount address, module address).\n    function xAccountOf(uint256 fromChainId, address deployer, address factory)\n        public\n        pure\n        returns (address, address)\n    {\n        bytes32 salt = keccak256(abi.encodePacked(fromChainId, deployer));\n        return CREATE3.getDeployed(salt, factory);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"},"src/interfaces/ISafeMsgportModule.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISafeMsgportModule {\n    function setup(address xAccount, uint256 chainId, address owner, address port_) external;\n}\n"},"src/interfaces/ISafeProxyFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISafeProxyFactory {\n    function proxyCreationCode() external pure returns (bytes memory);\n}\n"},"src/interfaces/ISafe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nenum Operation {\n    Call,\n    DelegateCall\n}\n\ninterface ISafe {\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n    function enableModule(address module) external;\n    function execTransactionFromModuleReturnData(address to, uint256 value, bytes memory data, Operation operation)\n        external\n        returns (bool success, bytes memory returnData);\n}\n"},"src/interfaces/IPortRegistry.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ninterface IPortRegistry {\n    function get(uint256 chainId, address port) external view returns (string memory);\n    function get(uint256 chainId, string calldata name) external view returns (address);\n}\n"},"src/interfaces/IMessagePort.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ninterface IMessagePort {\n    error MessageFailure(bytes errorData);\n\n    /// @dev Send a cross-chain message over the MessagePort.\n    /// @notice Send a cross-chain message over the MessagePort.\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params) external payable;\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    ///         It should be noted that not all ports will implement this interface.\n    /// @dev If the messaging protocol does not support on-chain fetch fee, then revert with \"Unimplemented!\".\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    function fee(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        view\n        returns (uint256);\n}\n"},"src/ports/base/PortMetadata.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IPortMetadata.sol\";\n\ncontract PortMetadata is IPortMetadata {\n    string internal _name;\n    string internal _uri;\n\n    constructor(string memory name_) {\n        _name = name_;\n    }\n\n    function _setURI(string memory uri_) internal virtual {\n        _uri = uri_;\n        emit URI(uri_);\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function uri() public view virtual returns (string memory) {\n        return _uri;\n    }\n}\n"},"src/user/Application.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.17;\n\nabstract contract Application {\n    function _msgPort() internal view returns (address _port) {\n        _port = msg.sender;\n    }\n\n    /// @notice The cross-chain message source chainId\n    function _fromChainId() internal pure returns (uint256 _msgDataFromChainId) {\n        require(msg.data.length >= 52, \"!fromChainId\");\n        assembly {\n            _msgDataFromChainId := calldataload(sub(calldatasize(), 52))\n        }\n    }\n\n    /// @notice Get the source chain fromDapp address.\n    function _xmsgSender() internal pure returns (address payable _from) {\n        require(msg.data.length >= 20, \"!fromDapp\");\n        assembly {\n            _from := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n}\n"},"src/utils/CREATE3.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Bytes32AddressLib} from \"solmate/utils/Bytes32AddressLib.sol\";\n\n/// @notice Deploy to deterministic addresses without an initcode factor.\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/CREATE3.sol)\nlibrary CREATE3 {\n    using Bytes32AddressLib for bytes32;\n\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\n    // 0x52       |  0x52                 | MSTORE           |                        //\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\n    // 0xf3       |  0xf3                 | RETURN           |                        //\n    //--------------------------------------------------------------------------------//\n    bytes internal constant PROXY_BYTECODE = hex\"67363d3d37363d34f03d5260086018f3\";\n\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\n\n    function deploy(bytes32 salt, bytes memory creationCode1, address implementation)\n        internal\n        returns (address deployed1, address deployed2)\n    {\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\n\n        address proxy;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\n            // We start 32 bytes into the code to avoid copying the byte length.\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\n        }\n        require(proxy != address(0), \"DEPLOYMENT_FAILED\");\n\n        (deployed1, deployed2) = getDeployed(salt, address(this));\n        (bool success,) = proxy.call(creationCode1);\n        require(success && deployed1.code.length != 0, \"INITIALIZATION_FAILED1\");\n        bytes memory creationCode2 = clone(implementation);\n        (success,) = proxy.call(creationCode2);\n        require(success && deployed2.code.length != 0, \"INITIALIZATION_FAILED2\");\n    }\n\n    function clone(address target) internal pure returns (bytes memory) {\n        bytes20 targetBytes = bytes20(target);\n        bytes memory code = new bytes(0x37);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(code, 0x34), targetBytes)\n            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n        }\n        return code;\n    }\n\n    function getDeployed(bytes32 salt, address factory) internal pure returns (address, address) {\n        address proxy = keccak256(abi.encodePacked(bytes1(0xFF), factory, salt, PROXY_BYTECODE_HASH))\n            // Prefix:\n            // Creator:\n            // Salt:\n            // Bytecode hash:\n            .fromLast20Bytes();\n\n        address deployed1 = keccak256(abi.encodePacked(hex\"d694\", proxy, hex\"01\")) // Nonce of the proxy contract (1)\n            // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\n            // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n            .fromLast20Bytes();\n\n        address deployed2 = keccak256(abi.encodePacked(hex\"d694\", proxy, hex\"02\")) // Nonce of the proxy contract (2)\n            // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x02)\n            // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n            .fromLast20Bytes();\n        return (deployed1, deployed2);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"src/interfaces/IPortMetadata.sol":{"content":"// This file is part of Darwinia.\n// Copyright (C) 2018-2023 Darwinia Network\n// SPDX-License-Identifier: GPL-3.0\n//\n// Darwinia is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Darwinia is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ninterface IPortMetadata {\n    event URI(string uri);\n\n    /// @notice Get the port name, it's globally unique and immutable.\n    /// @return The MessagePort name.\n    function name() external view returns (string memory);\n\n    /// @return The port metadata uri.\n    function uri() external view returns (string memory);\n}\n"},"lib/solmate/src/utils/Bytes32AddressLib.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Library for converting between addresses and bytes32 values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\nlibrary Bytes32AddressLib {\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\n        return bytes32(bytes20(addressValue));\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}},"settings":{"remappings":["@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/","@layerzerolabs/solidity-examples/=lib/solidity-examples/","@openzeppelin/=lib/openzeppelin-contracts/","@darwinia/contracts-periphery/=lib/darwinia-messages-sol/contracts/periphery/","sgn-v2-contracts/=lib/sgn-v2-contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","ORMP/=lib/ORMP/","create3-deploy/=lib/create3-deploy/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs"},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc"]}},"evmVersion":"london","libraries":{}}}
